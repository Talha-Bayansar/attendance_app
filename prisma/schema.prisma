// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Mosque {
    id            String         @id @default(cuid())
    name          String
    organisations Organisation[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Organisation {
    id        String   @id @default(cuid())
    name      String
    members   Member[]
    units     Unit[]
    users     User[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Mosque    Mosque?  @relation(fields: [mosqueId], references: [id])
    mosqueId  String?

    @@index([mosqueId])
}

model Unit {
    id             String        @id @default(cuid())
    name           String
    categories     Category[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    Organisation   Organisation? @relation(fields: [organisationId], references: [id])
    organisationId String?

    @@index([organisationId])
}

model Category {
    id        String   @id @default(cuid())
    name      String
    color     String
    events    Event[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Unit      Unit?    @relation(fields: [unitId], references: [id])
    unitId    String?

    @@index([unitId])
}

model Event {
    id         String    @id @default(cuid())
    name       String
    date       DateTime  @default(now())
    attendees  Member[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    Category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    @@index([categoryId])
}

model Member {
    id             String        @id @default(cuid())
    firstName      String
    lastName       String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    Organisation   Organisation? @relation(fields: [organisationId], references: [id])
    organisationId String?
    events         Event[]

    @@index([organisationId])
}

enum Role {
    APP_ADMIN
    MOSQUE_ADMIN
    ORGANISATION_ADMIN
    UNIT_ADMIN
    USER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String        @id @default(cuid())
    name           String?
    email          String?       @unique
    emailVerified  DateTime?
    image          String?
    role           Role          @default(USER)
    accounts       Account[]
    sessions       Session[]
    Organisation   Organisation? @relation(fields: [organisationId], references: [id])
    organisationId String?

    @@index([organisationId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
