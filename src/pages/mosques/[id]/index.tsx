import { Actions } from "@/auth";
import {
  EmptyState,
  Layout,
  List,
  ListItem,
  LoadingIndicator,
  Modal,
} from "@/components";
import { t } from "@/locales";
import { api, appName, getMenuItems, Routes } from "@/utils";
import { type Organisation } from "@prisma/client";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useState } from "react";

const MosqueDetails = () => {
  const router = useRouter();
  const { id, title } = router.query;
  const [selectedOrganisation, setSelectedOrganisation] =
    useState<Organisation>(null);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const mutation = api.organisation.deleteOne.useMutation();
  const queryContext = api.useContext();

  const toggleModal = () => {
    setIsModalOpen((value) => !value);
  };

  const selectOrganisation = (organisation: Organisation) => {
    setSelectedOrganisation(organisation);
    toggleModal();
  };

  const handleRemove = () => {
    mutation.mutate({ id: selectedOrganisation?.id });
    queryContext.mosque.getOneMosque.setData(
      { id: id as string },
      (oldData) => ({
        ...oldData,
        organisations: oldData.organisations.filter(
          (organisation) => organisation.id !== selectedOrganisation?.id
        ),
      })
    );
    toggleModal();
  };

  const menuItems = getMenuItems({
    onAdd: () => router.push(`${Routes.ORGANISATIONS}/create?mosqueId=${id}`),
    onEdit: () => router.push(`${Routes.MOSQUES}/${id}/edit`),
  });

  const { data, isFetching } = api.mosque.getOneMosque.useQuery({
    id: id as string,
  });

  return (
    <>
      <Head>
        <title>{`${appName} - ${title}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <Layout
        title={data?.name ?? (title as string)}
        menuItems={menuItems}
        requiredActions={[Actions.MOSQUE_READ]}
      >
        <main className="flex flex-grow flex-col p-4">
          {isFetching ? (
            <LoadingIndicator />
          ) : data.organisations.length < 1 ? (
            <EmptyState text={t.mosque.noOrganisationsFound} />
          ) : (
            <List>
              {data?.organisations?.map((organisation) => (
                <ListItem
                  key={organisation.id}
                  title={organisation.name}
                  onClick={() =>
                    router.push(
                      `${Routes.ORGANISATIONS}/${organisation.id}?title=${organisation.name}`
                    )
                  }
                  onDelete={() => selectOrganisation(organisation)}
                  onEdit={() =>
                    router.push(
                      `${Routes.ORGANISATIONS}/${organisation.id}/edit`
                    )
                  }
                />
              ))}
            </List>
          )}
          <Modal
            isOpen={isModalOpen}
            title={t.modal.removeOrganisation}
            onClose={toggleModal}
            onConfirm={handleRemove}
          />
        </main>
      </Layout>
    </>
  );
};

export default MosqueDetails;
