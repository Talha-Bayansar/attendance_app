import {
  EmptyState,
  InputField,
  Layout,
  ListItem,
  LoadingIndicator,
  Modal,
} from "@/components";
import { api, appName, getMenuItems, Routes } from "@/utils";
import Head from "next/head";
import React, { useState } from "react";
import { useFormik } from "formik";
import { Actions } from "@/auth";
import { t } from "@/locales";
import { useRouter } from "next/router";
import type { Mosque } from "@prisma/client";

const Mosques = () => {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [selectedMosque, setSelectedMosque] = useState<Mosque>(null);
  const { values, handleChange, handleSubmit } = useFormik({
    initialValues: {
      search: "",
    },
    onSubmit: (values) => {
      setSearchQuery(values.search);
    },
  });

  const toggleModal = () => {
    setIsModalOpen((value) => !value);
  };

  const selectMosque = (mosque) => {
    setSelectedMosque(mosque);
    toggleModal();
  };

  const menuItems = getMenuItems({
    onAdd: () => router.push(`${Routes.MOSQUES}/create`),
  });

  const queryContext = api.useContext();

  const { data, isFetching } = api.mosque.getAllMosques.useQuery({
    take: 10,
    query: searchQuery,
  });

  const mutation = api.mosque.deleteMosque.useMutation();

  const handleRemove = (id: string) => {
    mutation.mutate({ id: id });
    queryContext.mosque.getAllMosques.setData(
      {
        take: 10,
        query: searchQuery,
      },
      (oldData) => oldData.filter((mosque) => mosque.id !== id)
    );
    toggleModal();
  };

  return (
    <>
      <Head>
        <title>{`${appName} - ${t.mosque.title}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <Layout
        title={t.mosque.title}
        requiredActions={[Actions.MOSQUE_READ]}
        menuItems={menuItems}
      >
        <main className="flex flex-grow flex-col gap-8 p-4">
          <form className="mt-4" onSubmit={handleSubmit}>
            <InputField
              id="search"
              name="search"
              label={t.mosque.search}
              value={values.search}
              onChange={handleChange}
            />
          </form>
          <div className="flex-grow">
            {isFetching ? (
              <LoadingIndicator />
            ) : data.length < 1 ? (
              <EmptyState text={t.mosque.noMosquesFound} />
            ) : (
              <div className="flex flex-col gap-4">
                {data.map((mosque) => (
                  <ListItem
                    key={mosque.id}
                    className="text-left text-header2"
                    title={mosque.name}
                    onClick={() =>
                      router.push(
                        `${Routes.MOSQUES}/${mosque.id}?title=${mosque.name}`
                      )
                    }
                    onEdit={() =>
                      router.push(`${Routes.MOSQUES}/${mosque.id}/edit`)
                    }
                    onDelete={() => selectMosque(mosque)}
                  />
                ))}
              </div>
            )}
          </div>
          <Modal
            isOpen={isModalOpen}
            onClose={toggleModal}
            onConfirm={() => handleRemove(selectedMosque?.id)}
            title={t.modal.removeMosque}
          />
        </main>
      </Layout>
    </>
  );
};

export default Mosques;
