import { Actions } from "@/auth";
import { Layout, LoadingIndicator, InputField, Button } from "@/components";
import { t } from "@/locales";
import { api, appName } from "@/utils";
import { useFormik } from "formik";
import Head from "next/head";
import { useRouter } from "next/router";
import React from "react";
import { PuffLoader } from "react-spinners";

const EditUnit = () => {
  const mutation = api.unit.update.useMutation();
  const router = useRouter();
  const { id } = router.query;
  const { data, isLoading } = api.unit.getOne.useQuery({
    id: id as string,
  });

  const { values, handleChange, handleSubmit } = useFormik({
    initialValues: {
      name: data?.name ?? "",
      admins: data?.admins ?? [],
    },
    enableReinitialize: true,
    onSubmit: (values) => {
      mutation.mutate(
        {
          id: id as string,
          name: values.name ?? "",
          admins: values.admins.map((admin) => admin.id) ?? [],
        },
        {
          onSuccess() {
            router.back();
          },
        }
      );
    },
  });

  return (
    <>
      <Head>
        <title>{`${appName} - ${t.unit.updateUnit}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <Layout
        title={t.unit.updateUnit}
        requiredActions={[Actions.UNIT_UPDATE]}
        showNavBar={false}
      >
        {isLoading ? (
          <LoadingIndicator />
        ) : (
          <form
            className="flex flex-grow flex-col justify-between p-4"
            onSubmit={handleSubmit}
          >
            <div className="flex flex-col gap-4">
              <InputField
                className="mt-4"
                id="name"
                label={t.common.name}
                name="name"
                isActive={data !== undefined}
                value={values.name}
                onChange={handleChange}
                inputProps={{ required: true, autoComplete: "off" }}
              />
            </div>
            <Button
              className="mb-4 flex justify-center"
              disabled={mutation.isLoading}
            >
              {mutation.isLoading ? (
                <PuffLoader size={24} color="white" />
              ) : (
                t.common.edit
              )}
            </Button>
          </form>
        )}
      </Layout>
    </>
  );
};

export default EditUnit;
